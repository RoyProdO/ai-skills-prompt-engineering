# One-Shot Prompt Practice
# Code Review Comment
prompt: |
  Write a constructive code review comment for a pull request. Here's an example:
  
  Example: "Great work on implementing the user authentication! I noticed the password validation could be strengthened by adding a check for special characters. Consider using a regex pattern like /^(?=.*[!@#$%^&*])/ to ensure at least one special character. This would align with our security standards. Otherwise, the logic flow looks solid!"
  
  Now write a similar code review comment for a WhatsApp integration module that has good error handling but lacks proper logging.
ai_response: ""Nice job on implementing robust error handling in the WhatsApp integration module! The use of try-catch blocks and fallback logic is well thought out and should help maintain stability during API failures. One area for improvement would be logging‚Äîcurrently, errors are caught but not logged, which could make debugging and monitoring more difficult in production. Consider adding structured logging (e.g., using logger.error() with context like message ID or endpoint) to capture these events. This will help with traceability and align with our observability standards. Overall, great progress!""

# User Story Writing
prompt: |
  Write a user story following this format:
  
  Example: "As a customer service manager, I want to view real-time chat metrics on a dashboard so that I can monitor team performance and identify bottlenecks during peak hours. Acceptance criteria: Dashboard updates every 30 seconds, shows active chats, average response time, and agent availability."
  
  Now write a user story for a customer who wants to receive automated WhatsApp notifications about their order status.
ai_response: "User Story:
As a customer, I want to receive automated WhatsApp notifications about my order status so that I can stay informed without having to check manually.

Acceptance Criteria:

Notifications are sent at key order milestones: order confirmation, dispatch, out for delivery, and delivered.
Messages include order ID, current status, and estimated delivery date.
Opt-in and opt-out options are available via WhatsApp.
Notifications are sent within 1 minute of status change in the system."

# Bug Report
prompt: |
  Write a detailed bug report using this structure:
  
  Example: "**Title:** Login form validation fails with special characters
  **Environment:** Chrome 120, Windows 11, Production
  **Steps to Reproduce:** 1) Navigate to login page 2) Enter email with + symbol 3) Click submit
  **Expected Result:** User should be logged in successfully
  **Actual Result:** Error message 'Invalid email format' appears
  **Priority:** Medium - affects users with email aliases"
  
  Now write a bug report for WhatsApp messages not being delivered during peak hours.
ai_response: "Title: WhatsApp Messages Fail to Deliver During Peak Hours

Environment:
WhatsApp Business API v2.45
Node.js backend (v18.16.0)
AWS Lambda (us-east-1)
Production

Steps to Reproduce:

Send WhatsApp message via API between 6 PM and 8 PM local time
Monitor delivery status via webhook or dashboard
Observe message logs and delivery reports
Expected Result:
Messages should be delivered to recipients within 5 seconds of API call, with status updates received via webhook.

Actual Result:
Messages remain in "pending" state for extended periods (10+ minutes) or fail without a delivery receipt. No webhook updates are triggered.

Priority:
High ‚Äì Affects customer communication during peak business hours, leading to missed updates and reduced service reliability.

"

# Status Update Email
prompt: |
  Write a project status update email following this example:
  
  Example: "Subject: Weekly Update - Mobile App Redesign Project
  
  Hi Team,
  
  Here's our progress update for Week 12:
  
  ‚úÖ **Completed:** User interface mockups for login and dashboard screens
  ‚úÖ **In Progress:** Backend API integration (60% complete)
  ‚ö†Ô∏è **Blocked:** Waiting for design approval on payment flow
  üìÖ **Next Week:** Complete API integration, begin user testing preparation
  
  Risk: Design approval delay may push testing back 3 days. Mitigation: Parallel work on other screens.
  
  Questions or concerns? Let's discuss in our Friday standup.
  
  Best regards,
  Sarah"
  
  Now write a status update email for the WhatsApp integration project covering week 8 of development.
ai_response: "Subject: Weekly Update ‚Äì WhatsApp Integration Project (Week 8)

Hi Team,

Here‚Äôs our progress update for Week 8:

‚úÖ Completed:

Initial setup of WhatsApp Business API
Basic message delivery and webhook configuration tested successfully
‚úÖ In Progress:

CRM integration for syncing customer profiles (70% complete)
Message template approval process with Meta
‚ö†Ô∏è Blocked:

Delay in receiving final API credentials from vendor
Awaiting confirmation on data retention policy from compliance team
üìÖ Next Week:

Finalize CRM integration
Begin testing automated order status notifications
Draft fallback strategy for message delivery failures
Risk:
Vendor credential delay may impact testing timeline by 3‚Äì4 days.
Mitigation: Continue development using sandbox environment and prioritize non-dependent tasks.

Questions or concerns? Let‚Äôs review in our Thursday sync.

Best regards,
[Your Name]
[Your Role]"